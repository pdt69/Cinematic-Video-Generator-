import { Mood, Style, AspectRatio, IntroType, TextAnimationStyle, TextAnimationSpeed, SoundEffect, ParticleType, Resolution, ImageFilter } from './types';

export const LOADING_MESSAGES = [
  "Warming up the virtual cameras...",
  "Adjusting the lighting and focus...",
  "Rendering cinematic atoms...",
  "Consulting with the director of photography...",
  "Our AI director is calling 'Action!'...",
  "Polishing the final cut, this might take a moment...",
  "Adding a touch of Hollywood magic...",
];

// FIX: Explicitly type the array literal before sorting to prevent TypeScript from widening the `value` property to `string`.
export const MOOD_OPTIONS: { label: string; value: Mood }[] = ([
    { label: 'üó∫Ô∏è Adventurous', value: 'Adventurous' },
    { label: 'üò∞ Anxious', value: 'Anxious' },
    { label: 'üí• Chaotic', value: 'Chaotic' },
    { label: 'üé¨ Cinematic', value: 'Cinematic' },
    { label: 'üòÇ Comedic', value: 'Comedic' },
    { label: 'üé≠ Dramatic', value: 'Dramatic' },
    { label: '‚òÅÔ∏è Dreamy', value: 'Dreamy' },
    { label: '‚ú® Energetic', value: 'Energetic' },
    { label: 'üåå Ethereal', value: 'Ethereal' },
    { label: 'üéÑ Festive', value: 'Festive' },
    { label: 'üöÄ Futuristic', value: 'Futuristic' },
    { label: 'üèôÔ∏è Gritty', value: 'Gritty' },
    { label: 'üôè Hopeful', value: 'Hopeful' },
    { label: 'üëª Horror', value: 'Horror' },
    { label: 'üòÑ Joyful', value: 'Joyful' },
    { label: 'üëë Majestic', value: 'Majestic' },
    { label: 'üòî Melancholic', value: 'Melancholic' },
    { label: 'üòà Mischievous', value: 'Mischievous' },
    { label: 'üïµÔ∏è Mysterious', value: 'Mysterious' },
    { label: 'üï∞Ô∏è Nostalgic', value: 'Nostalgic' },
    { label: 'üîÆ Ominous', value: 'Ominous' },
    { label: 'üòå Peaceful', value: 'Peaceful' },
    { label: 'üòú Playful', value: 'Playful' },
    { label: 'ü§î Reflective', value: 'Reflective' },
    { label: '‚ù§Ô∏è Romantic', value: 'Romantic' },
    { label: 'üßò‚Äç‚ôÄÔ∏è Serene', value: 'Serene' },
    { label: 'üòî Somber', value: 'Somber' },
    { label: 'üïå Spiritual', value: 'Spiritual' },
    { label: 'üò® Suspenseful', value: 'Suspenseful' },
    { label: 'üèûÔ∏è Tranquil', value: 'Tranquil' },
    { label: 'üèÜ Triumphant', value: 'Triumphant' },
    { label: 'üôå Uplifting', value: 'Uplifting' },
    { label: 'üéûÔ∏è Vintage', value: 'Vintage' },
    { label: 'ü¶Ñ Whimsical', value: 'Whimsical' },
] as { label: string; value: Mood }[]).sort((a,b) => a.label.localeCompare(b.label));

export const STYLE_OPTIONS: { label: string; value: Style }[] = ([
    { label: 'üåÄ Abstract', value: 'Abstract' },
    { label: 'üåç Afrofuturism', value: 'Afrofuturism' },
    { label: 'üéå Anime', value: 'Anime' },
    { label: 'üé® Art Brut', value: 'Art Brut' },
    { label: 'üèõÔ∏è Art Deco', value: 'Art Deco' },
    { label: 'üåø Art Nouveau', value: 'Art Nouveau' },
    { label: 'üèõÔ∏è Baroque', value: 'Baroque' },
    { label: 'üèóÔ∏è Bauhaus', value: 'Bauhaus' },
    { label: 'üß¨ Biopunk', value: 'Biopunk' },
    { label: '‚ö™Ô∏è Black & White', value: 'Black and White' },
    { label: 'üìº Cassette Futurism', value: 'Cassette Futurism' },
    { label: 'üéÖ Christmas', value: 'Christmas' },
    { label: 'üß± Claymation', value: 'Claymation' },
    { label: 'üìñ Comic Book', value: 'Comic Book' },
    { label: 'üßä Cubism', value: 'Cubism' },
    { label: 'ü§ñ Cyberpunk', value: 'Cyberpunk' },
    { label: 'ü§™ Dadaism', value: 'Dadaism' },
    { label: 'üè∞ Dark Fantasy', value: 'Dark Fantasy' },
    { label: 'üü• De Stijl', value: 'De Stijl' },
    { label: '‚öôÔ∏è Dieselpunk', value: 'Dieselpunk' },
    { label: 'üé≠ Expressionism', value: 'Expressionism' },
    { label: 'üîÆ Fantasy', value: 'Fantasy' },
    { label: 'üé® Fauvism', value: 'Fauvism' },
    { label: 'üå∏ Folk Art', value: 'Folk Art' },
    { label: '‚è© Futurism', value: 'Futurism' },
    { label: 'üçÉ Ghibli-esque', value: 'Ghibli-esque' },
    { label: 'üì∫ Glitch Art', value: 'Glitch Art' },
    { label: 'ü¶á Gothic', value: 'Gothic' },
    { label: 'üé® Graffiti', value: 'Graffiti' },
    { label: 'üì∏ Hyper-realistic', value: 'Hyper-realistic' },
    { label: 'üé® Impressionistic', value: 'Impressionistic' },
    { label: 'üåô Islamic Art', value: 'Islamic Art' },
    { label: 'üéµ Lo-fi', value: 'Lo-fi' },
    { label: 'üßä Low Poly', value: 'Low Poly' },
    { label: '‚óΩ Minimalist', value: 'Minimalist' },
    { label: 'üèõÔ∏è Neoclassicism', value: 'Neoclassicism' },
    { label: 'üïµÔ∏è Noir', value: 'Noir' },
    { label: 'üé® Oil Painting', value: 'Oil Painting' },
    { label: 'üëæ Pixel Art', value: 'Pixel Art' },
    { label: 'üé® Pointillism', value: 'Pointillism' },
    { label: 'üí• Pop Art', value: 'Pop Art' },
    { label: 'üòµ Psychedelic', value: 'Psychedelic' },
    { label: 'üèûÔ∏è Realism', value: 'Realism' },
    { label: 'üé® Renaissance', value: 'Renaissance' },
    { label: 'üëë Rococo', value: 'Rococo' },
    { label: '‚ù§Ô∏è Romanticism', value: 'Romanticism' },
    { label: 'üò± Scream', value: 'Scream' },
    { label: 'üöÄ Sci-Fi', value: 'Sci-Fi' },
    { label: '‚úèÔ∏è Sketch', value: 'Sketch' },
    { label: 'üå± Solarpunk', value: 'Solarpunk' },
    { label: '‚öôÔ∏è Steampunk', value: 'Steampunk' },
    { label: 'üî≥ Suprematism', value: 'Suprematism' },
    { label: 'ü§™ Surreal', value: 'Surreal' },
    { label: 'üåÉ Synthwave', value: 'Synthwave' },
    { label: 'üëª Tim Burton', value: 'Tim Burton' },
    { label: 'üëÅÔ∏è Trompe-l\'≈ìil', value: 'Trompe-l\'≈ìil' },
    { label: 'üë∫ Ukiyo-e', value: 'Ukiyo-e' },
    { label: 'üå¥ Vaporwave', value: 'Vaporwave' },
    { label: 'üìº Vintage Film', value: 'Vintage Film' },
    { label: 'üß± Voxel Art', value: 'Voxel Art' },
    { label: 'üíß Watercolor', value: 'Watercolor' },
] as { label: string; value: Style }[]).sort((a, b) => a.label.localeCompare(b.label));

export const ASPECT_RATIO_OPTIONS: { label: string; value: AspectRatio }[] = [
    { label: 'Landscape (16:9)', value: '16:9' },
    { label: 'Portrait (9:16)', value: '9:16' },
    { label: 'Square (1:1)', value: '1:1' },
    { label: 'Standard TV (4:3)', value: '4:3' },
    { label: 'Cinema (2.39:1)', value: '2.39:1' },
];

export const RESOLUTION_OPTIONS: { label: string; value: Resolution }[] = [
    { label: 'SD (480p)', value: 'SD' },
    { label: 'HD (1080p)', value: 'HD' },
    { label: '4K (2160p)', value: '4K' },
];

const introTypes = ([
    { label: 'üìñ Book Open', value: 'Book Open' },
    { label: 'üïí Clock Wipe', value: 'Clock Wipe' },
    { label: 'üîÄ Crossfade', value: 'Crossfade' },
    { label: 'üé≠ Curtain Open', value: 'Curtain Open' },
    { label: 'üìü Digital Scanlines', value: 'Digital Scanlines' },
    { label: 'üé¨ Dynamic Transition', value: 'Dynamic Transition' },
    { label: '‚ö´ Fade In/Out', value: 'Fade In/Out' },
    { label: 'üéûÔ∏è Focus Pull', value: 'Focus Pull' },
    { label: 'üì∫ Glitch Intro', value: 'Glitch Intro' },
    { label: '‚úèÔ∏è Hand-drawn Reveal', value: 'Hand-drawn Reveal' },
    { label: 'üíß Ink Reveal', value: 'Ink Reveal' },
    { label: 'üëÅÔ∏è Iris', value: 'Iris' },
    { label: 'üí† Kaleidoscope', value: 'Kaleidoscope' },
    { label: '‚ú® Lens Flare', value: 'LensFlare' },
    { label: 'üíß Liquid Metal', value: 'Liquid Metal' },
    { label: '‚ñ∂Ô∏è Logo Animation', value: 'Logo Animation' },
    { label: 'üìΩÔ∏è Old Film Projector', value: 'Old Film Projector' },
    { label: 'üí• Particle Burst', value: 'Particle Burst' },
    { label: 'üëæ Pixelate In', value: 'Pixelate In' },
    { label: 'üí• Shatter', value: 'Shatter' },
    { label: '‚û°Ô∏è Slide', value: 'Slide' },
    { label: 'üé¨ Stop Motion Reveal', value: 'Stop Motion Reveal' },
    { label: '‚è≥ Time-lapse Reveal', value: 'Time-lapse Reveal' },
    { label: 'üî§ Title Card', value: 'Title Card' },
    { label: '‚ÜîÔ∏è Wipe', value: 'Wipe' },
    { label: 'üîé Zoom', value: 'Zoom' },
] as { label: string; value: IntroType }[]).sort((a, b) => a.label.localeCompare(b.label));


export const INTRO_TYPE_OPTIONS: { label: string; value: IntroType }[] = [
    { label: 'None', value: 'None' },
    ...introTypes,
];

// FIX: Explicitly type the array literal before sorting to prevent TypeScript from widening the `value` property to `string`.
export const TEXT_ANIMATION_STYLE_OPTIONS = ([
    { label: 'Blink', value: 'Blink' },
    { label: 'Bounce', value: 'Bounce' },
    { label: 'Chase', value: 'Chase' },
    { label: 'Drop In', value: 'Drop In' },
    { label: 'Echo', value: 'Echo' },
    { label: 'Elastic', value: 'Elastic' },
    { label: 'Fade In', value: 'Fade In' },
    { label: 'Flicker', value: 'Flicker' },
    { label: 'Flip', value: 'Flip' },
    { label: 'Fountain', value: 'Fountain' },
    { label: 'Glitch', value: 'Glitch' },
    { label: 'Glow', value: 'Glow' },
    { label: 'Jelly', value: 'Jelly' },
    { label: 'Pop', value: 'Pop' },
    { label: 'Pulse', value: 'Pulse' },
    { label: 'Shake', value: 'Shake' },
    { label: 'Slide In', value: 'Slide In' },
    { label: 'Spin', value: 'Spin' },
    { label: 'Strobe', value: 'Strobe' },
    { label: 'Stutter', value: 'Stutter' },
    { label: 'Swirl', value: 'Swirl' },
    { label: 'Typewriter', value: 'Typewriter' },
    { label: 'Wave', value: 'Wave' },
    { label: 'Wiggle', value: 'Wiggle' },
    { label: 'Wobble', value: 'Wobble' },
    { label: 'Zoom In', value: 'Zoom In' },
] as { label: string; value: TextAnimationStyle }[]).sort((a, b) => a.label.localeCompare(b.label));

export const TEXT_ANIMATION_SPEED_OPTIONS: { label: string; value: TextAnimationSpeed }[] = [
    { label: 'Slow', value: 'Slow' },
    { label: 'Normal', value: 'Normal' },
    { label: 'Fast', value: 'Fast' },
];

const soundEffects = ([
    { label: 'üëè Applause', value: 'Applause', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_500KB_MP3.mp3' },
    { label: 'üîî Bell', value: 'Bell', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_100KB_MP3.mp3' },
    { label: 'üê¶ Birdsong', value: 'Birdsong', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_500KB_MP3.mp3' },
    { label: 'üì∏ Camera', value: 'Camera', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_100KB_MP3.mp3' },
    { label: 'üí• Explosion', value: 'Explosion', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_500KB_MP3.mp3' },
    { label: 'üéÖ Ho Ho Ho', value: 'HoHoHo', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_100KB_MP3.mp3' },
    { label: '‚ú® Magic Wand', value: 'MagicWand', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_100KB_MP3.mp3' },
    { label: 'üåä Ocean Waves', value: 'OceanWaves', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_500KB_MP3.mp3' },
    { label: 'üíß Rain', value: 'Rain', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_500KB_MP3.mp3' },
    { label: 'üå©Ô∏è Thunder', value: 'Thunder', url: 'https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_500KB_MP3.mp3' },
] as { label: string; value: SoundEffect; url: string }[]).sort((a,b) => a.label.localeCompare(b.label));

export const SOUND_EFFECT_OPTIONS: { label: string; value: SoundEffect; url: string }[] = [
    { label: 'None', value: 'None', url: '' },
    ...soundEffects,
];

export const PARTICLE_TYPE_OPTIONS: { label: string; value: ParticleType }[] = [
    { label: 'None', value: 'None' },
    { label: '‚ú® Sparkles', value: 'Sparkles' },
    { label: 'üí® Dust', value: 'Dust' },
    { label: 'üéâ Confetti', value: 'Confetti' },
    { label: 'üíß Rain', value: 'Rain' },
    { label: '‚ùÑÔ∏è Snow', value: 'Snow' },
    { label: 'üèÆ Fireflies', value: 'Fireflies' },
];

export const IMAGE_FILTER_OPTIONS: { label: string; value: ImageFilter }[] = [
    { label: 'None', value: 'None' },
    { label: 'üéûÔ∏è Sepia', value: 'Sepia' },
    { label: '‚ö´ Grayscale', value: 'Grayscale' },
    { label: 'üîÑ Invert', value: 'Invert' },
    { label: 'üï∞Ô∏è Vintage', value: 'Vintage' },
    { label: 'üåà Technicolor', value: 'Technicolor' },
    { label: 'üì∑ Lomo', value: 'Lomo' },
    { label: 'üñºÔ∏è Polaroid', value: 'Polaroid' },
];